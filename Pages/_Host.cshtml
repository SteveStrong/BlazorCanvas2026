@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace BlazorCanvas2026.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorCanvas2026.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/Blazor.Extensions.Canvas/blazor.extensions.canvas.js"></script>
    
    <!-- Load FoundryBlazor FIRST -->
    <script src="_content/FoundryBlazor/js/app-lib.js"></script>
    
    <!-- Level 1: Direct JavaScript Interop for Canvas.razor -->
    <script src="js/canvas-interop.js"></script>
    
    <!-- Try to initialize FoundryBlazor immediately after it loads -->
    <script>
        console.log('=== JAVASCRIPT LOADING ORDER TEST ===');
        console.log('1. Checking what FoundryBlazor exposed:', typeof AppLib, typeof window.AppBrowser);
        
        // Try to call the original FoundryBlazor initialization
        if (typeof AppLib !== 'undefined' && typeof AppLib.Load === 'function') {
            console.log('2. Calling AppLib.Load()...');
            AppLib.Load();
            console.log('3. After AppLib.Load(), AppBrowser is:', typeof window.AppBrowser);
        } else {
            console.log('2. AppLib.Load not found, creating manual AppBrowser...');
            
            // Create AppBrowser if FoundryBlazor didn't
            window.AppBrowser = {
                AnimationRequest: null,
                
                HTMLWindow: function() {
                    return { InnerWidth: window.innerWidth, InnerHeight: window.innerHeight };
                },
                
                Initialize: function() {
                    console.log('AppBrowser.Initialize() called - MANUAL VERSION');
                    this.AnimationRequest = null;
                },
                
                Finalize: function() {
                    console.log('AppBrowser.Finalize() called');
                    this.StopAnimation();
                },
                
                StartAnimation: function() {
                    console.log('AppBrowser.StartAnimation() called');
                    if (this.AnimationRequest === null) {
                        this.AnimationRequest = window.requestAnimationFrame(() => this.RenderJS(this));
                    }
                },
                
                StopAnimation: function() {
                    console.log('AppBrowser.StopAnimation() called');
                    if (this.AnimationRequest !== null) {
                        window.cancelAnimationFrame(this.AnimationRequest);
                        this.AnimationRequest = null;
                    }
                },
                
                RenderJS: function(instance) {
                    try {
                        if (typeof DotNet !== 'undefined' && DotNet.invokeMethodAsync) {
                            DotNet.invokeMethodAsync("FoundryBlazor", "TriggerAnimationFrame")
                                .catch(error => console.warn('TriggerAnimationFrame failed:', error));
                        }
                    } catch (error) {
                        console.warn('TriggerAnimationFrame error:', error);
                    }
                    
                    if (instance.AnimationRequest !== null) {
                        instance.AnimationRequest = window.requestAnimationFrame(() => instance.RenderJS(instance));
                    }
                }
            };
        }
        
        console.log('4. Final state - AppBrowser available:', typeof window.AppBrowser !== 'undefined');
        console.log('5. AppBrowser methods:', typeof window.AppBrowser === 'object' ? Object.keys(window.AppBrowser) : 'N/A');
    </script>
</body>
</html>
